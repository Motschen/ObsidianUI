plugins {
    id 'dev.architectury.loom' version '1.2-SNAPSHOT'
    id 'io.github.juuxel.loom-vineflower' version '1.+'
    id 'com.github.johnrengelman.shadow' version "8.1.1"
    id 'java-library'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

// This field defines the Java version your mod target.
def targetJavaVersion = 8

def getMCVersionString() {
    return project.minecraft_version
}

loom {
    forge {
        mixinConfigs = [
                "spruceui.mixins.json"
        ]
    }
}

repositories {
    maven {
        name = "AperLambda"
        url = 'https://aperlambda.github.io/maven'
    }
    maven { url "https://maven.architectury.dev/" }
}

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    forge "net.minecraftforge:forge:${project.forge_version}"

    modImplementation("me.shedaniel:architectury-forge:${project.architectury_version}")

    shadow("org.aperlambda:lambdajcommon:1.8.1") {
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
    }
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    if (JavaVersion.current().isJava9Compatible()) {
        if (JavaVersion.current().isJava9Compatible()) {
            it.options.release.set(targetJavaVersion)
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    dependsOn jar
    configurations = [project.configurations.shadow]
    destinationDirectory.set(file("${project.layout.buildDirectory.get()}/devlibs"))
    archiveClassifier.set('dev')

    exclude 'com.google.code.gson'
    exclude 'com.google.guava'
}
remapJar.dependsOn(shadowJar)

modrinth {
    token = System.getenv("MODRINTH_TOKEN")

    projectId = "${project.modrinth_id}"
    versionNumber = "${project.version}"
    versionType = "beta"
    changelog = file("CHANGELOG.md").getText('UTF-8')
    uploadFile = remapJar
    additionalFiles = [sourcesJar]
    gameVersions = ["1.16.4", "1.16.5"]
    loaders = ["forge"]
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    disableVersionDetection()

    def mainFile = upload(project.curseforge_id, remapJar)
    mainFile.displayName = "${project.version}"
    mainFile.releaseType = "beta"
    mainFile.changelog = file("CHANGELOG.md")
    mainFile.changelogType = "markdown"
    mainFile.addModLoader("Forge")
    mainFile.addJavaVersion("Java 8")
    mainFile.addGameVersion("1.16.4", "1.16.5")

    def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
    sourcesFile.changelog = file("CHANGELOG.md")
    sourcesFile.changelogType = "markdown"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {

    }
}
